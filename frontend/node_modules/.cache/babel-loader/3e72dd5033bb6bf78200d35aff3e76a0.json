{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectsmy\\\\CommentsSystem\\\\frontend\\\\src\\\\comments\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport { getComments as getCommentsApi, createComment as createCommentApi, updateComment as updateCommentApi, deleteComment as deleteCommentApi } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    commentsUrl,\n    currentUserId\n  } = _ref;\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId).then(comment => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text).then(() => {\n      const updatedBackendComments = backendComments.map(backendComment => {\n        if (backendComment.id === commentId) {\n          return { ...backendComment,\n            body: text\n          };\n        }\n\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n      setActiveComment(null);\n    });\n  };\n\n  const deleteComment = commentId => {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      deleteCommentApi().then(() => {\n        const updatedBackendComments = backendComments.filter(backendComment => backendComment.id !== commentId);\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getCommentsApi().then(data => {\n      setBackendComments(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUserId: currentUserId\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","CommentForm","Comment","getComments","getCommentsApi","createComment","createCommentApi","updateComment","updateCommentApi","deleteComment","deleteCommentApi","Comments","commentsUrl","currentUserId","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","then","comment","updatedBackendComments","map","id","body","window","confirm","data","rootComment"],"sources":["D:/projectsmy/CommentsSystem/frontend/src/comments/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport CommentForm from \"./CommentForm\";\r\nimport Comment from \"./Comment\";\r\nimport {\r\n  getComments as getCommentsApi,\r\n  createComment as createCommentApi,\r\n  updateComment as updateCommentApi,\r\n  deleteComment as deleteCommentApi,\r\n} from \"../api\";\r\n\r\nconst Comments = ({ commentsUrl, currentUserId }) => {\r\n  const [backendComments, setBackendComments] = useState([]);\r\n  const [activeComment, setActiveComment] = useState(null);\r\n  const rootComments = backendComments.filter(\r\n    (backendComment) => backendComment.parentId === null\r\n  );\r\n  const getReplies = (commentId) =>\r\n    backendComments\r\n      .filter((backendComment) => backendComment.parentId === commentId)\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n      );\r\n  const addComment = (text, parentId) => {\r\n    createCommentApi(text, parentId).then((comment) => {\r\n      setBackendComments([comment, ...backendComments]);\r\n      setActiveComment(null);\r\n    });\r\n  };\r\n\r\n  const updateComment = (text, commentId) => {\r\n    updateCommentApi(text).then(() => {\r\n      const updatedBackendComments = backendComments.map((backendComment) => {\r\n        if (backendComment.id === commentId) {\r\n          return { ...backendComment, body: text };\r\n        }\r\n        return backendComment;\r\n      });\r\n      setBackendComments(updatedBackendComments);\r\n      setActiveComment(null);\r\n    });\r\n  };\r\n  const deleteComment = (commentId) => {\r\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\r\n      deleteCommentApi().then(() => {\r\n        const updatedBackendComments = backendComments.filter(\r\n          (backendComment) => backendComment.id !== commentId\r\n        );\r\n        setBackendComments(updatedBackendComments);\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCommentsApi().then((data) => {\r\n      setBackendComments(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"comments\">\r\n      <h3 className=\"comments-title\">Comments</h3>\r\n      <div className=\"comment-form-title\">Write comment</div>\r\n      <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\r\n      <div className=\"comments-container\">\r\n        {rootComments.map((rootComment) => (\r\n          <Comment\r\n            key={rootComment.id}\r\n            comment={rootComment}\r\n            replies={getReplies(rootComment.id)}\r\n            activeComment={activeComment}\r\n            setActiveComment={setActiveComment}\r\n            addComment={addComment}\r\n            deleteComment={deleteComment}\r\n            updateComment={updateComment}\r\n            currentUserId={currentUserId}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Comments;"],"mappings":"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"},"metadata":{},"sourceType":"module"}